// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResearchLocations.Data;

namespace ResearchLocations.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210704132442_InitialViewOfLocations")]
    partial class InitialViewOfLocations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RegionId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.CityHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialLinks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegionViewId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RegionViewId");

                    b.ToTable("CityHistories");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.Region", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegionViewId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("RegionViewId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Hospital", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionViewId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RegionViewId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Landmark", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionViewId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RegionViewId");

                    b.ToTable("Landmarks");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Market", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionViewId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RegionViewId");

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.NonStop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionViewId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RegionViewId");

                    b.ToTable("NonStops");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.OtherObject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionViewId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RegionViewId");

                    b.ToTable("OtherObjects");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Park", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionViewId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RegionViewId");

                    b.ToTable("Parks");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Pharmacy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionViewId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RegionViewId");

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.PictureVideo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityHistoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HospitalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LandmarkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MarketId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NonStopId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ObjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherObjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PharmacyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PoliceStationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegionDescriptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegionViewId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RestaurantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RetailParkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchoolId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SportHobbyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityHistoryId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("LandmarkId");

                    b.HasIndex("MarketId");

                    b.HasIndex("NonStopId");

                    b.HasIndex("OtherObjectId");

                    b.HasIndex("ParkId");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("PoliceStationId");

                    b.HasIndex("RegionDescriptionId");

                    b.HasIndex("RegionViewId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("RetailParkId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("ShopId");

                    b.HasIndex("SportHobbyId");

                    b.HasIndex("StationId");

                    b.ToTable("PictureVideos");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.PoliceStation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionViewId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RegionViewId");

                    b.ToTable("PoliceStations");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.RegionDescription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AirPollution")
                        .HasColumnType("int");

                    b.Property<int>("BikeArea")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenPlaygrounds")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Noise")
                        .HasColumnType("int");

                    b.Property<int>("ParkingSpaces")
                        .HasColumnType("int");

                    b.Property<int>("PublicTransport")
                        .HasColumnType("int");

                    b.Property<int>("StreetLighting")
                        .HasColumnType("int");

                    b.Property<int>("StreetPollution")
                        .HasColumnType("int");

                    b.Property<int>("StreetQuality")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("RegionDescriptions");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Restaurant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionViewId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RegionViewId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.RetailPark", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionViewId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RegionViewId");

                    b.ToTable("RetailParks");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.School", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionViewId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RegionViewId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionViewId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RegionViewId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.SportHobby", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionViewId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RegionViewId");

                    b.ToTable("SportHobbies");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Station", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionViewId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RegionViewId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionView", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegionDescriptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StreetLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("YearOfDeparture")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("YearOfResidence")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RegionDescriptionId");

                    b.HasIndex("RegionId");

                    b.ToTable("RegionViews");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.ApplicationUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ResearchLocations.Data.Models.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.Location.City", null)
                        .WithMany("Users")
                        .HasForeignKey("CityId");

                    b.HasOne("ResearchLocations.Data.Models.Location.Region", null)
                        .WithMany("Users")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.CityHistory", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.ApplicationUser", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedByUserId");

                    b.HasOne("ResearchLocations.Data.Models.Location.City", "City")
                        .WithMany("Histories")
                        .HasForeignKey("CityId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionView", null)
                        .WithMany("Histories")
                        .HasForeignKey("RegionViewId");

                    b.Navigation("AddedByUser");

                    b.Navigation("City");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.Region", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.Location.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Comment", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.ApplicationUser", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedByUserId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionView", "Region")
                        .WithMany("Comments")
                        .HasForeignKey("RegionViewId");

                    b.Navigation("AddedByUser");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Hospital", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.Location.RegionView", "Region")
                        .WithMany("Hospitals")
                        .HasForeignKey("RegionViewId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Landmark", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.Location.RegionView", "Region")
                        .WithMany("Landmarks")
                        .HasForeignKey("RegionViewId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Market", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.Location.RegionView", "Region")
                        .WithMany("Markets")
                        .HasForeignKey("RegionViewId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.NonStop", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.Location.RegionView", "Region")
                        .WithMany("NonStops")
                        .HasForeignKey("RegionViewId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.OtherObject", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.Location.RegionView", "Region")
                        .WithMany("OtherObjects")
                        .HasForeignKey("RegionViewId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Park", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.Location.RegionView", "Region")
                        .WithMany("Parks")
                        .HasForeignKey("RegionViewId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Pharmacy", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.Location.RegionView", "Region")
                        .WithMany("Pharmacies")
                        .HasForeignKey("RegionViewId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.PictureVideo", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.Location.CityHistory", null)
                        .WithMany("PictureVideos")
                        .HasForeignKey("CityHistoryId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionComponents.Hospital", "Hospital")
                        .WithMany("PictureVideos")
                        .HasForeignKey("HospitalId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionComponents.Landmark", "Landmark")
                        .WithMany("PictureVideos")
                        .HasForeignKey("LandmarkId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionComponents.Market", "Market")
                        .WithMany("PictureVideos")
                        .HasForeignKey("MarketId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionComponents.NonStop", "NonStop")
                        .WithMany("PictureVideos")
                        .HasForeignKey("NonStopId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionComponents.OtherObject", "OtherObject")
                        .WithMany("PictureVideos")
                        .HasForeignKey("OtherObjectId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionComponents.Park", "Park")
                        .WithMany("PictureVideos")
                        .HasForeignKey("ParkId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionComponents.Pharmacy", "Pharmacy")
                        .WithMany("PictureVideos")
                        .HasForeignKey("PharmacyId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionComponents.PoliceStation", "PoliceStation")
                        .WithMany("PictureVideos")
                        .HasForeignKey("PoliceStationId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionComponents.RegionDescription", null)
                        .WithMany("PictureVideos")
                        .HasForeignKey("RegionDescriptionId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionView", "Region")
                        .WithMany("PictureVideos")
                        .HasForeignKey("RegionViewId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionComponents.Restaurant", "Restaurant")
                        .WithMany("PictureVideos")
                        .HasForeignKey("RestaurantId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionComponents.RetailPark", "RetailPark")
                        .WithMany("PictureVideos")
                        .HasForeignKey("RetailParkId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionComponents.School", "School")
                        .WithMany("PictureVideos")
                        .HasForeignKey("SchoolId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionComponents.Shop", "Shop")
                        .WithMany("PictureVideos")
                        .HasForeignKey("ShopId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionComponents.SportHobby", "SportHobby")
                        .WithMany("PictureVideos")
                        .HasForeignKey("SportHobbyId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionComponents.Station", "Station")
                        .WithMany("PictureVideos")
                        .HasForeignKey("StationId");

                    b.Navigation("Hospital");

                    b.Navigation("Landmark");

                    b.Navigation("Market");

                    b.Navigation("NonStop");

                    b.Navigation("OtherObject");

                    b.Navigation("Park");

                    b.Navigation("Pharmacy");

                    b.Navigation("PoliceStation");

                    b.Navigation("Region");

                    b.Navigation("Restaurant");

                    b.Navigation("RetailPark");

                    b.Navigation("School");

                    b.Navigation("Shop");

                    b.Navigation("SportHobby");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.PoliceStation", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.Location.RegionView", "Region")
                        .WithMany("PoliceStations")
                        .HasForeignKey("RegionViewId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Restaurant", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.Location.RegionView", "Region")
                        .WithMany("Restaurants")
                        .HasForeignKey("RegionViewId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.RetailPark", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.Location.RegionView", "Region")
                        .WithMany("RetailParks")
                        .HasForeignKey("RegionViewId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.School", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.Location.RegionView", "Region")
                        .WithMany("Schools")
                        .HasForeignKey("RegionViewId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Shop", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.Location.RegionView", "Region")
                        .WithMany("Shops")
                        .HasForeignKey("RegionViewId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.SportHobby", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.Location.RegionView", "Region")
                        .WithMany("Hobbies")
                        .HasForeignKey("RegionViewId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Station", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.Location.RegionView", "Region")
                        .WithMany("Stations")
                        .HasForeignKey("RegionViewId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionView", b =>
                {
                    b.HasOne("ResearchLocations.Data.Models.ApplicationUser", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedByUserId");

                    b.HasOne("ResearchLocations.Data.Models.Location.City", null)
                        .WithMany("Regions")
                        .HasForeignKey("CityId");

                    b.HasOne("ResearchLocations.Data.Models.Location.RegionComponents.RegionDescription", "Description")
                        .WithMany()
                        .HasForeignKey("RegionDescriptionId");

                    b.HasOne("ResearchLocations.Data.Models.Location.Region", "Region")
                        .WithMany("RegionViews")
                        .HasForeignKey("RegionId");

                    b.Navigation("AddedByUser");

                    b.Navigation("Description");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.City", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("Regions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.CityHistory", b =>
                {
                    b.Navigation("PictureVideos");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.Region", b =>
                {
                    b.Navigation("RegionViews");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Hospital", b =>
                {
                    b.Navigation("PictureVideos");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Landmark", b =>
                {
                    b.Navigation("PictureVideos");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Market", b =>
                {
                    b.Navigation("PictureVideos");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.NonStop", b =>
                {
                    b.Navigation("PictureVideos");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.OtherObject", b =>
                {
                    b.Navigation("PictureVideos");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Park", b =>
                {
                    b.Navigation("PictureVideos");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Pharmacy", b =>
                {
                    b.Navigation("PictureVideos");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.PoliceStation", b =>
                {
                    b.Navigation("PictureVideos");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.RegionDescription", b =>
                {
                    b.Navigation("PictureVideos");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Restaurant", b =>
                {
                    b.Navigation("PictureVideos");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.RetailPark", b =>
                {
                    b.Navigation("PictureVideos");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.School", b =>
                {
                    b.Navigation("PictureVideos");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Shop", b =>
                {
                    b.Navigation("PictureVideos");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.SportHobby", b =>
                {
                    b.Navigation("PictureVideos");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionComponents.Station", b =>
                {
                    b.Navigation("PictureVideos");
                });

            modelBuilder.Entity("ResearchLocations.Data.Models.Location.RegionView", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Histories");

                    b.Navigation("Hobbies");

                    b.Navigation("Hospitals");

                    b.Navigation("Landmarks");

                    b.Navigation("Markets");

                    b.Navigation("NonStops");

                    b.Navigation("OtherObjects");

                    b.Navigation("Parks");

                    b.Navigation("Pharmacies");

                    b.Navigation("PictureVideos");

                    b.Navigation("PoliceStations");

                    b.Navigation("Restaurants");

                    b.Navigation("RetailParks");

                    b.Navigation("Schools");

                    b.Navigation("Shops");

                    b.Navigation("Stations");
                });
#pragma warning restore 612, 618
        }
    }
}
